---
import type { GetStaticPaths } from "astro";
import MainLayout from "../../layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.interface";
import Title from "@components/shared/Title.astro";
import {Icon} from 'astro-icon/components'

export const getStaticPaths = (async () => {

    const resp = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=151`)

    const { results } = await resp.json() as PokemonListResponse
    
    return results.map(({name, url}) => ({
        params: {
            name
        },
        props: {
            name,
            url
        }
    }));
}) satisfies GetStaticPaths;

const {name} = Astro.params
const {url} = Astro.props


const id = url.split('/').at(-2)

const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`

const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`

---

<MainLayout title={`Pokémon - #${id} ${name}`} description={`Información sobre el pokémon ${name}`} image={imageSrc}>
    <section class="mt-10 mx-10 flex flex-col justify-center items-center ">
        <div class="flex flex-row ">
            <div>
                <button 
                onclick="history.back()"
                class="text-blue-500">Regresar</button>
                <Title>{name}</Title>
            </div>
    
            <button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
                <Icon data-outline name="heart-outline" size={50}  />
                <Icon data-full name="heart-full" size={50} class="hidden"  />

            </button>
        </div>
   

        <PokemonCard name={name} url={url} isBig/>

        <audio controls class="mt-5">
            <source src={audioSrc} type="audio/ogg" />
            Your browser does not support the audio element.
        </audio>
    </section>
</MainLayout>

<script>
import type { FavoritePokemon } from "@interfaces/favorite-pokemons.interface"

 

    const handlePageLoad = () => {

        let favoritesPokemons: FavoritePokemon[] = JSON.parse(
            localStorage.getItem('favorites') ?? '[]'
        )

    const btnFavorite = document.querySelector('#btn-favorite') as HTMLButtonElement

    if(!btnFavorite) return

    const name = btnFavorite.dataset.name ?? ''

    const id = btnFavorite.dataset.id ?? ''

    const isFavorite = favoritesPokemons.some(fav => fav.name === name)

    const heartOutline = btnFavorite.querySelector('[data-outline]') as HTMLElement;

    const heartFull = btnFavorite.querySelector('[data-full]') as HTMLElement;

    if(isFavorite) {
        heartOutline.classList.add('hidden')
        heartFull.classList.remove('hidden')
    }

    const toggleFavorite = () => {

     if(isFavorite) {
         favoritesPokemons = favoritesPokemons.filter( fav=> fav.name !== name)
     }else{
        favoritesPokemons.push({
        id: +id, name
     })
     }

     localStorage.setItem('favorites', JSON.stringify(favoritesPokemons))

    }

    btnFavorite.addEventListener("click", () => {
        heartOutline.classList.toggle('hidden')
        heartFull.classList.toggle('hidden')

        toggleFavorite()
    })
 }

    document.addEventListener('astro:page-load', handlePageLoad)


</script>

<style>
    a {
        @apply hover:underline text-blue-500;
    }

    #btn-favorite{
        @apply hover:animate-pulse
    }
</style>